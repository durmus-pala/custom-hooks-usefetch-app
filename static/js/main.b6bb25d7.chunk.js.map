{"version":3,"sources":["functions/Functions.js","App.js","hooks/UseFetch.js","reportWebVitals.js","index.js"],"names":["getData","url","a","axios","get","headers","response","App","intVal","useState","setResponse","error","setError","loading","setLoading","useEffect","then","data","catch","useFetch","className","message","map","result","id","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAEaA,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACEC,IAAMC,IAAIH,EAAK,CACpCI,QAAS,CAAE,eAAgB,sBAFR,cACfC,EADe,yBAIdA,GAJc,2CAAH,sD,eCwBLC,MAvBf,WAAgB,IAAD,ECAS,SAACN,EAAKO,GAAY,IAAD,EACPC,mBAASD,GADF,mBAChCF,EADgC,KACtBI,EADsB,OAEbD,oBAAS,GAFI,mBAEhCE,EAFgC,KAEzBC,EAFyB,OAGTH,oBAAS,GAHA,mBAGhCI,EAHgC,KAGvBC,EAHuB,KAiBvC,OAZAC,qBAAU,WACRf,EAAQC,GACLe,MAAK,SAACV,GACLI,EAAYJ,EAASW,MACrBH,GAAW,MAEZI,OAAM,SAACP,GACNC,EAASD,GACTG,GAAW,QAEd,CAACb,IAEG,CAAEK,WAAUO,UAASF,SDhBSQ,CACnC,6CACA,IAFMb,EADK,EACLA,SAAUO,EADL,EACKA,QAASF,EADd,EACcA,MAI3B,OACE,sBAAKS,UAAU,MAAf,UACE,6CACCP,EACC,2CACEF,EACF,4BAAIA,EAAMU,UADH,OAGPf,QAHO,IAGPA,OAHO,EAGPA,EAAUgB,KAAI,SAACC,GAAD,OACZ,qCACGA,QADH,IACGA,OADH,EACGA,EAAQC,GADX,aACkBD,QADlB,IACkBA,OADlB,EACkBA,EAAQE,OADlBF,EAAOC,WELVE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b6bb25d7.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getData = async (url) => {\r\n  const response = await axios.get(url, {\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n  });\r\n  return response;\r\n};\r\n","import { useFetch } from \"./hooks/UseFetch\";\nimport \"./App.css\";\n\nfunction App() {\n  const { response, loading, error } = useFetch(\n    \"https://jsonplaceholder.typicode.com/users\",\n    {}\n  );\n  return (\n    <div className=\"App\">\n      <h2>Custom Hook</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p>{error.message}</p>\n      ) : (\n        response?.map((result) => (\n          <p key={result.id}>\n            {result?.id} - {result?.name}\n          </p>\n        ))\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\r\nimport { getData } from \"../functions/Functions\";\r\n\r\nexport const useFetch = (url, intVal) => {\r\n  const [response, setResponse] = useState(intVal);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    getData(url)\r\n      .then((response) => {\r\n        setResponse(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setError(error);\r\n        setLoading(false);\r\n      });\r\n  }, [url]);\r\n\r\n  return { response, loading, error };\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}